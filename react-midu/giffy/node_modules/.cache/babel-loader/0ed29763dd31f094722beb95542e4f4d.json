{"ast":null,"code":"var _jsxFileName = \"H:\\\\Proyectos\\\\mas-proyectos-de-react\\\\giffy\\\\src\\\\componentes\\\\TrendingSearches\\\\TrendingSearches.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport getTrendingTerms from 'services/getTrendingTerms';\nimport Category from '../Category/Category';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TrendingSearches() {\n  _s();\n\n  const [trends, setTrends] = useState([]);\n  useEffect(function () {\n    getTrendingTerms().then(setTrends);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Category, {\n    name: \"Tendencias\",\n    options: trends\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 10\n  }, this);\n} // Para evitar que el componente se cargue cuando no lo estemos viendo.\n\n\n_s(TrendingSearches, \"kLUnhehmoevJwfCWQUk2udGvkuc=\");\n\n_c = TrendingSearches;\nexport default function LazyTrending() {\n  _s2();\n\n  const [show, setShow] = useState(false);\n  useEffect(function () {\n    /* Esta API nos permite (entre otras cosas) detectar cuando un elemento esta\r\n    en el ViePort. Recibe dos parametros: 1. El callback que se ejecutara cada vez que haya una \r\n    actualizacion sobre lo que se esta observando. 2. Un objeto de opciones. */\n    const observer = new IntersectionObserver(onChange, {\n      rootMargin: '100px' //Margen para cargar un poco antes el elemento.\n\n    });\n  });\n}\n\n_s2(LazyTrending, \"bXBd/WbmO9A8Q7bxaOKZvuJyGc0=\");\n\n_c2 = LazyTrending;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TrendingSearches\");\n$RefreshReg$(_c2, \"LazyTrending\");","map":{"version":3,"sources":["H:/Proyectos/mas-proyectos-de-react/giffy/src/componentes/TrendingSearches/TrendingSearches.js"],"names":["React","useEffect","useState","getTrendingTerms","Category","TrendingSearches","trends","setTrends","then","LazyTrending","show","setShow","observer","IntersectionObserver","onChange","rootMargin"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,gBAAP,MAA6B,2BAA7B;AACA,OAAOC,QAAP,MAAqB,sBAArB;;;AAEA,SAASC,gBAAT,GAA4B;AAAA;;AAC1B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,EAAD,CAApC;AAEAD,EAAAA,SAAS,CAAC,YAAY;AACpBE,IAAAA,gBAAgB,GACbK,IADH,CACQD,SADR;AAED,GAHQ,EAGN,EAHM,CAAT;AAKA,sBAAO,QAAC,QAAD;AAAU,IAAA,IAAI,EAAC,YAAf;AAA4B,IAAA,OAAO,EAAED;AAArC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,C,CAED;;;GAXSD,gB;;KAAAA,gB;AAYT,eAAe,SAASI,YAAT,GAAwB;AAAA;;AACrC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,KAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,YAAY;AAIpB;AACJ;AACA;AACI,UAAMW,QAAQ,GAAG,IAAIC,oBAAJ,CAAyBC,QAAzB,EAAmC;AAClDC,MAAAA,UAAU,EAAE,OADsC,CAC9B;;AAD8B,KAAnC,CAAjB;AAID,GAXQ,CAAT;AAYD;;IAfuBN,Y;;MAAAA,Y","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport getTrendingTerms from 'services/getTrendingTerms'\r\nimport Category from '../Category/Category'\r\n\r\nfunction TrendingSearches() {\r\n  const [trends, setTrends] = useState([])\r\n  \r\n  useEffect(function () {\r\n    getTrendingTerms()\r\n      .then(setTrends)\r\n  }, [])\r\n\r\n  return <Category name='Tendencias' options={trends} />\r\n}\r\n\r\n// Para evitar que el componente se cargue cuando no lo estemos viendo.\r\nexport default function LazyTrending() {\r\n  const [show, setShow] = useState(false);\r\n\r\n  useEffect(function () {\r\n\r\n    \r\n\r\n    /* Esta API nos permite (entre otras cosas) detectar cuando un elemento esta\r\n    en el ViePort. Recibe dos parametros: 1. El callback que se ejecutara cada vez que haya una \r\n    actualizacion sobre lo que se esta observando. 2. Un objeto de opciones. */\r\n    const observer = new IntersectionObserver(onChange, {\r\n      rootMargin: '100px' //Margen para cargar un poco antes el elemento.\r\n\r\n    })\r\n  })\r\n}"]},"metadata":{},"sourceType":"module"}