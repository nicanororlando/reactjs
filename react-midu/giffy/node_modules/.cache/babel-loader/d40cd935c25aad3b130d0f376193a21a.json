{"ast":null,"code":"var _jsxFileName = \"H:\\\\Proyectos\\\\mas-proyectos-de-react\\\\giffy\\\\src\\\\pages\\\\SearchResult\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport ListOfGifs from '../../componentes/ListOfGifs/ListOfGifs';\nimport SearchForm from '../../componentes/SearchForm/SearchForm';\nimport TrendingSearches from '../../componentes/TrendingSearches/TrendingSearches';\nimport { useGifs } from '../../hooks/useGifs';\nimport '../Home/index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SearchResult(_ref) {\n  _s();\n\n  let {\n    params\n  } = _ref;\n  const {\n    keyword\n  } = params; //Esto se hace ya que si le pedimos el keyword no lo mostraria, por eso en este caso hay q pedirle los params e igualarlo a keywords.\n\n  const {\n    loading,\n    gifs\n  } = useGifs({\n    keyword\n  }); //Extraemos los resultados del hook.\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(SearchForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Container\",\n      children: [loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n        animation: \"border\",\n        variant: \"info\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"Search-title\",\n          children: keyword\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ListOfGifs, {\n          gifs: gifs\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App-category\",\n        children: /*#__PURE__*/_jsxDEV(TrendingSearches, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n} // export defalut React.memo(SearchResult, funcionComparativa)\n\n/* React.memo lo que hace es comparar las props que le llegan, y si esas props son\r\niguales no repite ese renderizado. Si la funcionComparativa devuelve true, significa\r\nque las props son iguales y no se renderizaria, y si la funcion devuelve false \r\nrenderiza de nuevo el componente. */\n\n_s(SearchResult, \"3Jov/SJIL6YhtSQ19OXKK/Mxf7U=\", false, function () {\n  return [useGifs];\n});\n\n_c = SearchResult;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchResult\");","map":{"version":3,"sources":["H:/Proyectos/mas-proyectos-de-react/giffy/src/pages/SearchResult/index.js"],"names":["React","Spinner","ListOfGifs","SearchForm","TrendingSearches","useGifs","SearchResult","params","keyword","loading","gifs"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,UAAP,MAAuB,yCAAvB;AACA,OAAOC,UAAP,MAAuB,yCAAvB;AACA,OAAOC,gBAAP,MAA6B,qDAA7B;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,OAAO,mBAAP;;;AAEA,eAAe,SAASC,YAAT,OAAmC;AAAA;;AAAA,MAAZ;AAAEC,IAAAA;AAAF,GAAY;AAEhD,QAAM;AAAEC,IAAAA;AAAF,MAAcD,MAApB,CAFgD,CAEpB;;AAC5B,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBL,OAAO,CAAC;AAAEG,IAAAA;AAAF,GAAD,CAAjC,CAHgD,CAGA;;AAEhD,sBACE;AAAA,4BACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,iBACGC,OAAO,gBACN,QAAC,OAAD;AAAS,QAAA,SAAS,EAAC,QAAnB;AAA4B,QAAA,OAAO,EAAC,MAApC;AAAA,+BACE;AAAM,UAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADM,gBAIJ;AAAA,gCACF;AAAI,UAAA,SAAS,EAAC,cAAd;AAAA,oBAA8BD;AAA9B;AAAA;AAAA;AAAA;AAAA,gBADE,eAEF,QAAC,UAAD;AAAY,UAAA,IAAI,EAAEE;AAAlB;AAAA;AAAA;AAAA;AAAA,gBAFE;AAAA;AAAA;AAAA;AAAA;AAAA,cALN,eAUE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,+BACI,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAmBD,C,CAED;;AACA;AACA;AACA;AACA;;GA9BwBJ,Y;UAGID,O;;;KAHJC,Y","sourcesContent":["import React from 'react';\r\nimport Spinner from 'react-bootstrap/Spinner'\r\nimport ListOfGifs from '../../componentes/ListOfGifs/ListOfGifs';\r\nimport SearchForm from '../../componentes/SearchForm/SearchForm';\r\nimport TrendingSearches from '../../componentes/TrendingSearches/TrendingSearches';\r\nimport { useGifs } from '../../hooks/useGifs';\r\nimport '../Home/index.css';\r\n\r\nexport default function SearchResult ({ params }) {\r\n\r\n  const { keyword } = params; //Esto se hace ya que si le pedimos el keyword no lo mostraria, por eso en este caso hay q pedirle los params e igualarlo a keywords.\r\n  const { loading, gifs } = useGifs({ keyword }); //Extraemos los resultados del hook.\r\n\r\n  return (\r\n    <>\r\n      <SearchForm />\r\n      <div className=\"Container\">\r\n        {loading ? (\r\n          <Spinner animation=\"border\" variant=\"info\" >\r\n            <span className=\"visually-hidden\">Loading...</span>\r\n          </Spinner>\r\n        ) : <div>\r\n          <h3 className='Search-title'>{keyword}</h3>\r\n          <ListOfGifs gifs={gifs} />\r\n        </div>\r\n        }\r\n        <div className=\"App-category\">\r\n            <TrendingSearches />\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n// export defalut React.memo(SearchResult, funcionComparativa)\r\n/* React.memo lo que hace es comparar las props que le llegan, y si esas props son\r\niguales no repite ese renderizado. Si la funcionComparativa devuelve true, significa\r\nque las props son iguales y no se renderizaria, y si la funcion devuelve false \r\nrenderiza de nuevo el componente. */"]},"metadata":{},"sourceType":"module"}