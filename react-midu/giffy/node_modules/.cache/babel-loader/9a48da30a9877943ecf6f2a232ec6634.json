{"ast":null,"code":"var _jsxFileName = \"H:\\\\Proyectos\\\\mas-proyectos-de-react\\\\giffy\\\\src\\\\pages\\\\SearchResult\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport ListOfGifs from '../../componentes/ListOfGifs/ListOfGifs';\nimport { useGifs } from '../../hooks/useGifs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SearchResult(_ref) {\n  _s();\n\n  let {\n    params\n  } = _ref;\n  const {\n    keyword\n  } = params; //Esto se hace ya que si le pedimos el keyword no lo mostraria, por eso en este caso hay q pedirle los params e igualarlo a keywords.\n\n  const {\n    loading,\n    gifs\n  } = useGifs({\n    keyword\n  }); //Extraemos los resultados del hook.\n\n  return loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n    animation: \"border\",\n    variant: \"info\",\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"visually-hidden\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"App-title\",\n      children: gifs.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ListOfGifs, {\n      gifs: gifs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n} // export defalut React.memo(SearchResult, funcionComparativa)\n\n/* React.memo lo que hace es comparar las props que le llegan, y si esas props son\r\niguales no repite ese renderizado. Si la funcionComparativa devuelve true, significa\r\nque las props son iguales y no se renderizaria, y si la funcion devuelve false \r\nrenderiza de nuevo el componente. */\n\n_s(SearchResult, \"3Jov/SJIL6YhtSQ19OXKK/Mxf7U=\", false, function () {\n  return [useGifs];\n});\n\n_c = SearchResult;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchResult\");","map":{"version":3,"sources":["H:/Proyectos/mas-proyectos-de-react/giffy/src/pages/SearchResult/index.js"],"names":["React","Spinner","ListOfGifs","useGifs","SearchResult","params","keyword","loading","gifs","title"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,UAAP,MAAuB,yCAAvB;AACA,SAASC,OAAT,QAAwB,qBAAxB;;;AAEA,eAAe,SAASC,YAAT,OAAmC;AAAA;;AAAA,MAAZ;AAAEC,IAAAA;AAAF,GAAY;AAEhD,QAAM;AAAEC,IAAAA;AAAF,MAAcD,MAApB,CAFgD,CAEpB;;AAC5B,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBL,OAAO,CAAC;AAAEG,IAAAA;AAAF,GAAD,CAAjC,CAHgD,CAGA;;AAEhD,SACEC,OAAO,gBACL,QAAC,OAAD;AAAS,IAAA,SAAS,EAAC,QAAnB;AAA4B,IAAA,OAAO,EAAC,MAApC;AAAA,2BACE;AAAM,MAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADK,gBAIH;AAAA,4BACF;AAAI,MAAA,SAAS,EAAC,WAAd;AAAA,gBAA2BC,IAAI,CAACC;AAAhC;AAAA;AAAA;AAAA;AAAA,YADE,eAEF,QAAC,UAAD;AAAY,MAAA,IAAI,EAAED;AAAlB;AAAA;AAAA;AAAA;AAAA,YAFE;AAAA,kBALN;AAUD,C,CAED;;AACA;AACA;AACA;AACA;;GArBwBJ,Y;UAGID,O;;;KAHJC,Y","sourcesContent":["import React from 'react';\r\nimport Spinner from 'react-bootstrap/Spinner'\r\nimport ListOfGifs from '../../componentes/ListOfGifs/ListOfGifs';\r\nimport { useGifs } from '../../hooks/useGifs';\r\n\r\nexport default function SearchResult ({ params }) {\r\n\r\n  const { keyword } = params; //Esto se hace ya que si le pedimos el keyword no lo mostraria, por eso en este caso hay q pedirle los params e igualarlo a keywords.\r\n  const { loading, gifs } = useGifs({ keyword }); //Extraemos los resultados del hook.\r\n\r\n  return (\r\n    loading ? (\r\n      <Spinner animation=\"border\" variant=\"info\" >\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    ) : <>\r\n      <h3 className='App-title'>{gifs.title}</h3>\r\n      <ListOfGifs gifs={gifs} />\r\n    </>\r\n  )\r\n}\r\n\r\n// export defalut React.memo(SearchResult, funcionComparativa)\r\n/* React.memo lo que hace es comparar las props que le llegan, y si esas props son\r\niguales no repite ese renderizado. Si la funcionComparativa devuelve true, significa\r\nque las props son iguales y no se renderizaria, y si la funcion devuelve false \r\nrenderiza de nuevo el componente. */"]},"metadata":{},"sourceType":"module"}