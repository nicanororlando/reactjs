{"ast":null,"code":"var _jsxFileName = \"H:\\\\Proyectos\\\\mas-proyectos-de-react\\\\giffy\\\\src\\\\pages\\\\SearchResult\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport ListOfGifs from 'componentes/ListOfGifs/ListOfGifs';\nimport SearchForm from 'componentes/SearchForm/SearchForm';\nimport TrendingSearches from 'componentes/TrendingSearches/TrendingSearches';\nimport { useGifs } from 'hooks/useGifs';\nimport '../Home/index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SearchResult(_ref) {\n  _s();\n\n  let {\n    params\n  } = _ref;\n  const {\n    keyword\n  } = params; //Esto se hace ya que si le pedimos el keyword no lo mostraria, por eso en este caso hay q pedirle los params e igualarlo a keywords.\n\n  const {\n    loading,\n    gifs,\n    setPage\n  } = useGifs({\n    keyword\n  }); //Extraemos los resultados del hook.\n\n  const handleNextPage = () => {\n    alert('eeeeeeeeee');\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(SearchForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Container\",\n      children: [loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n        animation: \"border\",\n        variant: \"info\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Container-gifs\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"Search-title\",\n          children: decodeURI(keyword)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ListOfGifs, {\n          gifs: gifs\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TrendingSearches, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextPage,\n        children: \"Go to next page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n} // export defalut React.memo(SearchResult, funcionComparativa)\n\n/* React.memo lo que hace es comparar las props que le llegan, y si esas props son\r\niguales no repite ese renderizado. Si la funcionComparativa devuelve true, significa\r\nque las props son iguales y no se renderizaria, y si la funcion devuelve false \r\nrenderiza de nuevo el componente. */\n\n_s(SearchResult, \"UwxD/Juo24KRnfF3R437d7NXeTI=\", false, function () {\n  return [useGifs];\n});\n\n_c = SearchResult;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchResult\");","map":{"version":3,"sources":["H:/Proyectos/mas-proyectos-de-react/giffy/src/pages/SearchResult/index.js"],"names":["React","Spinner","ListOfGifs","SearchForm","TrendingSearches","useGifs","SearchResult","params","keyword","loading","gifs","setPage","handleNextPage","alert","decodeURI"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,UAAP,MAAuB,mCAAvB;AACA,OAAOC,UAAP,MAAuB,mCAAvB;AACA,OAAOC,gBAAP,MAA6B,+CAA7B;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,OAAO,mBAAP;;;AAEA,eAAe,SAASC,YAAT,OAAmC;AAAA;;AAAA,MAAZ;AAAEC,IAAAA;AAAF,GAAY;AAEhD,QAAM;AAAEC,IAAAA;AAAF,MAAcD,MAApB,CAFgD,CAEpB;;AAC5B,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA;AAAjB,MAA6BN,OAAO,CAAC;AAAEG,IAAAA;AAAF,GAAD,CAA1C,CAHgD,CAGS;;AAEzD,QAAMI,cAAc,GAAG,MAAM;AAACC,IAAAA,KAAK,CAAC,YAAD,CAAL;AAAoB,GAAlD;;AAEA,sBACE;AAAA,4BACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,iBACGJ,OAAO,gBACN,QAAC,OAAD;AAAS,QAAA,SAAS,EAAC,QAAnB;AAA4B,QAAA,OAAO,EAAC,MAApC;AAAA,+BACE;AAAM,UAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADM,gBAKN;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,gCACE;AAAI,UAAA,SAAS,EAAC,cAAd;AAAA,oBAA8BK,SAAS,CAACN,OAAD;AAAvC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,UAAD;AAAY,UAAA,IAAI,EAAEE;AAAlB;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,eAWE,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,cAXF,eAYE;AAAQ,QAAA,OAAO,EAAEE,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAmBD,C,CAED;;AACA;AACA;AACA;AACA;;GAhCwBN,Y;UAGaD,O;;;KAHbC,Y","sourcesContent":["import React from 'react';\r\nimport Spinner from 'react-bootstrap/Spinner'\r\nimport ListOfGifs from 'componentes/ListOfGifs/ListOfGifs';\r\nimport SearchForm from 'componentes/SearchForm/SearchForm';\r\nimport TrendingSearches from 'componentes/TrendingSearches/TrendingSearches';\r\nimport { useGifs } from 'hooks/useGifs';\r\nimport '../Home/index.css';\r\n\r\nexport default function SearchResult ({ params }) {\r\n\r\n  const { keyword } = params; //Esto se hace ya que si le pedimos el keyword no lo mostraria, por eso en este caso hay q pedirle los params e igualarlo a keywords.\r\n  const { loading, gifs, setPage } = useGifs({ keyword }); //Extraemos los resultados del hook.\r\n\r\n  const handleNextPage = () => {alert('eeeeeeeeee')}\r\n\r\n  return (\r\n    <>\r\n      <SearchForm />\r\n      <div className=\"Container\">\r\n        {loading ? (\r\n          <Spinner animation=\"border\" variant=\"info\" >\r\n            <span className=\"visually-hidden\">Loading...</span>\r\n          </Spinner>\r\n        ) : \r\n          <div className='Container-gifs'>\r\n            <h3 className='Search-title'>{decodeURI(keyword)}</h3>\r\n            <ListOfGifs gifs={gifs} />\r\n          </div>\r\n        }\r\n        <TrendingSearches />\r\n        <button onClick={handleNextPage}>Go to next page</button>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n// export defalut React.memo(SearchResult, funcionComparativa)\r\n/* React.memo lo que hace es comparar las props que le llegan, y si esas props son\r\niguales no repite ese renderizado. Si la funcionComparativa devuelve true, significa\r\nque las props son iguales y no se renderizaria, y si la funcion devuelve false \r\nrenderiza de nuevo el componente. */"]},"metadata":{},"sourceType":"module"}