{"ast":null,"code":"var _jsxFileName = \"H:\\\\Proyectos\\\\mas-proyectos-de-react\\\\giffy\\\\src\\\\pages\\\\SearchResult\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport '../../styles/Gif.css';\nimport Gif from '../../componentes/Gif.js';\nimport Spinner from 'react-bootstrap/Spinner';\nimport getGifs from '../../services/getGifs.js';\nimport './index.css';\nimport ListOfGifs from '../../componentes/ListOfGifs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SearchResult(_ref) {\n  _s();\n\n  let {\n    params\n  } = _ref;\n  const {\n    keyword\n  } = params; //Esto se hace ya que si le pedimos el keyword no lo mostraria, por eso en este caso hay q pedirle los params e igualarlo a keywords.\n\n  const [gifs, setGifs] = useState([]);\n  const [loading, setLoading] = useState(false); //Este HOOK nos permite ejecutar una funcion cada vez que se renderice nuestro componente.\n\n  useEffect(function () {\n    setLoading(true);\n    getGifs({\n      keyword\n    }).then(gifs => {\n      setGifs(gifs);\n      setLoading(false);\n    });\n  }, [keyword]);\n  /*Los corchetes estan para que esta funcion solo se ejecute la \r\n  primera vez, si no los ponemos, la funcion entraria en un bucle infinito ya \r\n  que la funcion se ejecutaria cada vez que se renderice el componente, y \r\n  como estamos llamando al setGifs y actualizando el estado, esto se haria infinitamente.\r\n  En esos corchetes entonces, va ubicada la dependencia del useEffect, si esta \r\n  vacio solo se renderiza la primera vez, pero como nosotros queremosir actualizando\r\n  el keyword cuando se quiera, necesitamos que se renderice cada vez q se actualice,\r\n  y por eso le ponemos como dependencia esa prop, entonces cada vez q cambia ese\r\n  keyword, se actualiza y se renderiza todo de nuevo. */\n\n  return loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n    animation: \"border\",\n    variant: \"info\",\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"visually-hidden\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(ListOfGifs, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 7\n  }, this);\n}\n\n_s(SearchResult, \"Gn/SHhFeiFWkH25FEu4Fxee4Tv4=\");\n\n_c = SearchResult;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchResult\");","map":{"version":3,"sources":["H:/Proyectos/mas-proyectos-de-react/giffy/src/pages/SearchResult/index.js"],"names":["React","useEffect","useState","Gif","Spinner","getGifs","ListOfGifs","SearchResult","params","keyword","gifs","setGifs","loading","setLoading","then"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAO,sBAAP;AACA,OAAOC,GAAP,MAAgB,0BAAhB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAO,aAAP;AACA,OAAOC,UAAP,MAAuB,8BAAvB;;AAEA,eAAe,SAASC,YAAT,OAAmC;AAAA;;AAAA,MAAZ;AAAEC,IAAAA;AAAF,GAAY;AAEhD,QAAM;AAACC,IAAAA;AAAD,MAAYD,MAAlB,CAFgD,CAEtB;;AAC1B,QAAM,CAACE,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,KAAD,CAAtC,CAJgD,CAMhD;;AACAD,EAAAA,SAAS,CAAC,YAAW;AACnBY,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAR,IAAAA,OAAO,CAAC;AAAEI,MAAAA;AAAF,KAAD,CAAP,CAAqBK,IAArB,CAA0BJ,IAAI,IAAI;AAChCC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAHD;AAID,GANQ,EAMN,CAACJ,OAAD,CANM,CAAT;AAMe;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,SACEG,OAAO,gBACL,QAAC,OAAD;AAAS,IAAA,SAAS,EAAC,QAAnB;AAA4B,IAAA,OAAO,EAAC,MAApC;AAAA,2BACE;AAAM,MAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADK,gBAKL,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,UANJ;AAUD;;GAjCuBL,Y;;KAAAA,Y","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport '../../styles/Gif.css';\r\nimport Gif from '../../componentes/Gif.js';\r\nimport Spinner from 'react-bootstrap/Spinner'\r\nimport getGifs from '../../services/getGifs.js';\r\nimport './index.css';\r\nimport ListOfGifs from '../../componentes/ListOfGifs';\r\n\r\nexport default function SearchResult ({ params }) {\r\n\r\n  const {keyword} = params; //Esto se hace ya que si le pedimos el keyword no lo mostraria, por eso en este caso hay q pedirle los params e igualarlo a keywords.\r\n  const [gifs, setGifs] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  //Este HOOK nos permite ejecutar una funcion cada vez que se renderice nuestro componente.\r\n  useEffect(function() {\r\n    setLoading(true);\r\n    getGifs({ keyword }).then(gifs => {\r\n      setGifs(gifs);\r\n      setLoading(false);\r\n    });\r\n  }, [keyword])  /*Los corchetes estan para que esta funcion solo se ejecute la \r\n      primera vez, si no los ponemos, la funcion entraria en un bucle infinito ya \r\n      que la funcion se ejecutaria cada vez que se renderice el componente, y \r\n      como estamos llamando al setGifs y actualizando el estado, esto se haria infinitamente.\r\n        En esos corchetes entonces, va ubicada la dependencia del useEffect, si esta \r\n      vacio solo se renderiza la primera vez, pero como nosotros queremosir actualizando\r\n      el keyword cuando se quiera, necesitamos que se renderice cada vez q se actualice,\r\n      y por eso le ponemos como dependencia esa prop, entonces cada vez q cambia ese\r\n      keyword, se actualiza y se renderiza todo de nuevo. */\r\n\r\n  return (\r\n    loading ? (\r\n      <Spinner animation=\"border\" variant=\"info\" >\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    ) : (\r\n      <ListOfGifs />\r\n    )\r\n    \r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}